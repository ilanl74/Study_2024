1. db and other external resources like files (improving sp )
2. use cache when posible 
3. running tasks async when dealing with external resources 
4. building the product in win-x64 --self-contained 
5. use compration in network (could be infrastructure with no code involved)

fault tolerant design :
1. use redundency (like always-on in mssql)
2. load balancing (if one resurece is ) 
3. cirute braking pattern (like in electricity) -> close (all good processing requests), open (when failure threashhold reached only some test request are processing to sample when the system is back to working ), half open part of the request are processing but not full load - we had somthing close to it with the detain checker 
3. exception handeling 
4. health check - to monitore our services 

transactionScope or BeginTransaction in Dapper -> distributed transactions are not supported in .net core . the replacement is stratigic like Eventual Consistency that relay on events to sync the data between deferent microservices , the system will be sync evantually but inconsistency can hapen in any given moment 

example of transaction in account save -> save the points in the db & set the balance floatig redeem (remonig the points with the neereset experation date )
& run the sync & export the change to external system &  

